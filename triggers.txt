# Does not allow negative prices and checks for duplicate productId's
DELIMITER $$
	CREATE TRIGGER PriceCheck BEFORE INSERT ON Product
	FOR EACH ROW
	BEGIN
	
		# Creates a temporary table with all the items in the wish list that match the new product 
		CREATE TEMPORARY TABLE Temp
        SELECT *
        FROM WishList
        WHERE category=NEW.category AND brand=NEW.brand AND model=NEW.model AND gender=NEW.gender AND size=NEW.size AND color=NEW.color;
	
		# Interrupts the action and prevents insertion with a negative price
		IF NEW.price<0
		THEN
			BEGIN
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='Price cannot be negative';
			END;
			
		# Interrupts the action and prevents insertion with duplicate productId
		ELSEIF (EXISTS(
			SELECT P.productId
			FROM Product P
			WHERE P.productId=NEW.productId
		))THEN
			BEGIN
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='ProductId already exists';
			END;
			
		# Interrupts the action and prevents insertion with startDate > endDate
		ELSEIF (NEW.startDate>NEW.endDate)
		THEN
			BEGIN
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='The end date cannot be before the start date';
            END;
			
		# Puts an alert for all the users that have the new inserted item in their wish list
		ELSEIF ((SELECT COUNT(*)
				FROM Temp) <>0)
        THEN
			BEGIN
				INSERT INTO Alerts (user, message)
                SELECT user, concat('The following item is availablenow: <a href=\"auction.jsp?productId="', ' ', NEW.productId,' ', '"  \">Click here to go to the auction page.</a>')
                FROM WishList;
            END;
		END IF;
		
		# Drops the temporary table created in the trigger
        DROP TEMPORARY TABLE Temp;
		END IF; 
	END; $$
DELIMITER ;

# Deletes the auto bidding for the deleted product
DROP TRIGGER IF EXISTS CancelAutoBidIfProductDeleted;
DELIMITER $$
	CREATE TRIGGER CancelAutoBidIfProductDeleted AFTER DELETE ON Product
    FOR EACH ROW
    BEGIN
		DELETE FROM AutoBidding WHERE productId=OLD.productId;
    END; $$
DELIMITER ;

# After the item gets sold, places it in the buying/selling history tables and deletes it from bid table
DELIMITER $$
	CREATE TRIGGER SoldItems AFTER UPDATE ON Product
    FOR EACH ROW 
    BEGIN
		# Checks if the item is sold
		IF NEW.sold=true
		THEN
			BEGIN
				# Inserts the item into the BuyingHistory table
				INSERT INTO BuyingHistory (price, buyer, productId, date)
				SELECT B.currentBid, B.buyer, B.productId, NOW()
				FROM Bid B
				WHERE B.productId=NEW.productId;
				
				# Inserts the item into the SellingHistory table
				INSERT INTO SellingHistory (productId, seller, price, date)
				SELECT P.productId, P.seller, P.price, NOW()
				FROM Product P
				WHERE P.productId=NEW.productId;
				
				# Alert for the seller
                INSERT INTO Alerts (user, message)
                SELECT P.seller, "Your item got sold!"
                FROM Product P
                WHERE P.productId=NEW.productId;
                
                # Alert for the buyer
                INSERT INTO Alerts (user, message)
                SELECT B.buyer, "You've got the item!"
                FROM Bid B
                WHERE B.productId=NEW.productId;
				
				# Deletes the item from the Bid table
				DELETE FROM Bid WHERE productId=NEW.productId;
			END;
		END IF;
		
		# Removes all auto biddings that have max_price that is less then the current bid on the product
        IF ((SELECT max_price
			FROM AutoBidding
            WHERE productId=NEW.productId)<=NEW.price)
        THEN
			BEGIN
				DELETE FROM AutoBidding WHERE productId=NEW.productId;
            END;
		END IF;
	END; $$
DELIMITER ;

# Updates the price after a new bid, and prevents placing bid lower than existing bid
DELIMITER $$
	CREATE TRIGGER UpdatingPrice AFTER UPDATE ON Bid
    FOR EACH ROW
    BEGIN
		# Updates the currentBid to the new bid if it's greater
		IF (NEW.currentBid>OLD.currentBid)
		THEN 
			BEGIN
				UPDATE Product
				SET price=NEW.currentBid
				WHERE NEW.productId=productId;
			END;
			
		# Interrupts the action and prevents the insertion with a lower bid
		ELSEIF (NEW.currentBid<=OLD.currentBid)
		THEN
			BEGIN
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='The new bid is lower than the current bid';
			END;
		END IF;
	END; $$
DELIMITER ;

# Prevents from starting a bid for lower than the min_bid and updates the price in Product if the new bid is higher
DELIMITER $$
	CREATE TRIGGER NewBid BEFORE INSERT ON Bid
    FOR EACH ROW
    BEGIN
		# Interrupts the action and prevents insertion with a bid lower than the min_bid
		IF (NEW.currentBid<(SELECT P.price
							FROM Product P
                            WHERE P.productId=NEW.productId))
        THEN 
			BEGIN
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='The new bid is lower than the current bid';
			END;
			
		# Updates the price value to the value of the new higher bid
		ELSEIF(NEW.currentBid>(SELECT P.price
								FROM Product P
								WHERE P.productId=NEW.productId))
		THEN
			BEGIN
				UPDATE Product
				SET price=NEW.currentBid
				WHERE NEW.productId=productId;
            END;
		END IF;
	END; $$
DELIMITER ;

# Stops the auto biding for the user that deactivated the account
DROP TRIGGER IF EXISTS CancelAutoBidding;
DELIMITER $$
	CREATE TRIGGER CancelAutoBidding AFTER UPDATE ON Account
    FOR EACH ROW
    BEGIN
		IF NEW.active=false
        THEN
			BEGIN
				DELETE FROM AutoBiding WHERE user=NEW.username;
			END;
		END IF;
    END; $$
DELIMITER ;

# Prevents deleting an admin account
DELIMITER $$
	CREATE TRIGGER AdminAccount BEFORE DELETE ON Account
    FOR EACH ROW
    BEGIN
		# Checks if the account is an admin account
		IF OLD.access_level=3
        THEN
			BEGIN
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='Cannot delete an admin account';
            END;
		END IF; 
	END; $$
DELIMITER ;

# An event that goes on once a day and removes the bids that are pastdue
DELIMITER $$
	CREATE EVENT PastDue 
	ON SCHEDULE EVERY 1 MINUTE STARTS NOW()
	COMMENT 'Delets pastdue bids'
	DO
		BEGIN
            UPDATE Product SET sold=true WHERE NOW()>endDate AND price>min_price;
			DELETE FROM Product WHERE NOW()>endDate AND price<min_price;
		END; $$
DELIMITER ;