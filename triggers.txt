# Does not allow negative prices and checks for duplicate productId's
DELIMITER $$
	CREATE TRIGGER PriceCheck BEFORE INSERT ON Product
	FOR EACH ROW
	BEGIN
		# Interrupts the action and prevents insertion with a negative price
		IF NEW.price<0
		THEN
			BEGIN
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='Price cannot be negative';
			END;
		# Interrupts the action and prevents insertion with duplicate productId
		ELSEIF (EXISTS(
			SELECT P.productId
			FROM Product P
			WHERE P.productId=NEW.productId
		))THEN
			BEGIN
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='ProductId already exists';
			END;
		# Interrupts the action and prevents insertion with startDate > endDate
		ELSEIF (NEW.startDate>NEW.endDate)
		THEN
			BEGIN
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='The end date cannot be before the start date';
            END;
		END IF; 
	END; $$
DELIMITER ;

# After the item gets sold, places it in the buying/selling history tables and deletes it from bid table
DELIMITER $$
	CREATE TRIGGER SoldItems AFTER UPDATE ON Product
    FOR EACH ROW 
    BEGIN
		# Checks if the item is sold
		IF NEW.sold=true
		THEN
			BEGIN
				# Inserts the item into the BuyingHistory table
				INSERT INTO BuyingHistory (price, buyer, productId, date)
				SELECT B.currentBid, B.buyer, B.productId, NOW()
				FROM Bid B
				WHERE B.productId=NEW.productId;
				
				# Inserts the item into the SellingHistory table
				INSERT INTO SellingHistory (productId, seller, price, date)
				SELECT P.productId, P.seller, P.price, NOW()
				FROM Product P
				WHERE P.productId=NEW.productId;
				
				# Deletes the item from the Bid table
				DELETE FROM Bid WHERE productId=NEW.productId;
			END;
		END IF; 
	END; $$
DELIMITER ;

# Updates the price after a new bid, and prevents placing bid lower than existing bid
DELIMITER $$
	CREATE TRIGGER UpdatingPrice AFTER UPDATE ON Bid
    FOR EACH ROW
    BEGIN
		# Updates the currentBid to the new bid if it's greater
		IF (NEW.currentBid>OLD.currentBid)
		THEN 
			BEGIN
				UPDATE Product
				SET price=NEW.currentBid
				WHERE NEW.productId=productId;
			END;
		# Inserts the action and prevents the insertion with a lower bid
		ELSEIF (NEW.currentBid<=OLD.currentBid)
		THEN
			BEGIN
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='The new bid is lower than the current bid';
			END;
		END IF;
	END; $$
DELIMITER ;

# Prevents from starting a bid for lower than the min_bid and updates the price in Product if the new bid is higher
DELIMITER $$
	CREATE TRIGGER NewBid BEFORE INSERT ON Bid
    FOR EACH ROW
    BEGIN
		# Interrupts the action and prevents insertion with a bid lower than the min_bid
		IF (NEW.currentBid<(SELECT P.price
							FROM Product P
                            WHERE P.productId=NEW.productId))
        THEN 
			BEGIN
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='The new bid is lower than the current bid';
			END;
		# Updates the price value to the value of the new higher bid
		ELSEIF(NEW.currentBid>(SELECT P.price
								FROM Product P
								WHERE P.productId=NEW.productId))
		THEN
			BEGIN
				UPDATE Product
				SET price=NEW.currentBid
				WHERE NEW.productId=productId;
            END;
		END IF;
	END; $$
DELIMITER ;

# Places the bid in the BidHistory table before updating the bid to new greater one (To keep track of bidding history)
DELIMITER $$
	CREATE TRIGGER ArchiveBids BEFORE DELETE ON Bid
    FOR EACH ROW
    BEGIN
		INSERT INTO BidHistory (bid, buyer, productId)
        SELECT B.currentBid, B.buyer, B.productId
        FROM Bid B
        WHERE OLD.productId=B.productId;
	END; $$
DELIMITER ;

# Prevents deleting an admin account
DELIMITER $$
	CREATE TRIGGER AdminAccount BEFORE DELETE ON Account
    FOR EACH ROW
    BEGIN
		# Checks if the account is an admin account
		IF OLD.access_level=3
        THEN
			BEGIN
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='Cannot delete an admin account';
            END;
		END IF; 
	END; $$
DELIMITER ;

# An event that goes on once a day and removes the bids that are pastdue
DELIMITER $$
	CREATE EVENT PastDue 
	ON SCHEDULE EVERY 1 DAY
	COMMENT 'Delets pastdue bids'
	DO
		BEGIN
			DELETE FROM Product WHERE NOW()>endDate;
		END; $$
DELIMITER ;